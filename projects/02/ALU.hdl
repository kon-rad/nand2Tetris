// by Konrad Gnat
// 4/26/2021
// File name: projects/02/ALU.hdl

/**
 * The ALU (Arithmetic Logic Unit).
 * Computes one of the following functions:
 * x+y, x-y, y-x, 0, 1, -1, x, y, -x, -y, !x, !y,
 * x+1, y+1, x-1, y-1, x&y, x|y on two 16-bit inputs, 
 * according to 6 input bits denoted zx,nx,zy,ny,f,no.
 * In addition, the ALU computes two 1-bit outputs:
 * if the ALU output == 0, zr is set to 1; otherwise zr is set to 0;
 * if the ALU output < 0, ng is set to 1; otherwise ng is set to 0.
 */

// Implementation: the ALU logic manipulates the x and y inputs
// and operates on the resulting values, as follows:
// if (zx == 1) set x = 0        // 16-bit constant
// if (nx == 1) set x = !x       // bitwise not
// if (zy == 1) set y = 0        // 16-bit constant
// if (ny == 1) set y = !y       // bitwise not
// if (f == 1)  set out = x + y  // integer 2's complement addition
// if (f == 0)  set out = x & y  // bitwise and
// if (no == 1) set out = !out   // bitwise not
// if (out == 0) set zr = 1
// if (out < 0) set ng = 1

CHIP ALU {
    IN  
        x[16], y[16],  // 16-bit inputs        
        zx, // zero the x input?
        nx, // negate the x input?
        zy, // zero the y input?
        ny, // negate the y input?
        f,  // compute out = x + y (if 1) or x & y (if 0)
        no; // negate the out output?

    OUT 
        out[16], // 16-bit output
        zr, // 1 if (out == 0), 0 otherwise
        ng; // 1 if (out < 0),  0 otherwise

    PARTS:
    Mux16(a=x, b=false, sel=zx, out=x1);
    Not16(in=x1, out=notX1);
    Mux16(a=x1, b=notX1, sel=nx, out=x2);
    
    Mux16(a=y, b=false, sel=zy, out=y1);
    Not16(in=y1, out=notY1);
    Mux16(a=y1, b=notY1, sel=ny, out=y2);

    Add16(a=x2, b=y2, out=xyAdd);
    And16(a=x2, b=y2, out=xyAnd);
    Mux16(a=xyAnd, b=xyAdd, sel=f, out=fOut);

    // Out
    Not16(in=fOut, out=negOut);
    Mux16(a=fOut, b=negOut, sel=no, out=out, out=outVar, out[15]=outVar0);

    // zr
    Or16(a=false, b=outVar, out[0..7]=zr0to7, out[8..15]=zr8to15);
    Or8Way(in=zr0to7, out=zr1);
    Or8Way(in=zr8to15, out=zr2);
    Or(a=zr1, b=zr2, out=zrPreNeg);
    Not(in=zrPreNeg, out=zr);

    // ng
    And(a=outVar0, b=true, out=ng);
}